# Runs build and unit test within the container.
# Extracts test results from container and publishes them.
# If source branch is master will push docker image and deploy to staging slot.

name: user-java

# specific path build
trigger:
  branches:
    include:
    - master
    - feature/*
  paths:
    include:
    - apis/user-java/*

resources:
- repo: self

variables:
  azureSubscription: 'OTA-PRD-197(87d46c94-c5c9-4807-8e95-788ae5f0629b)'
  dockerRegistryServiceConnection: '593474d4-1b31-441a-838b-adcd84a14eb0'
  imageRepository: 'devopsoh/api-user-java'
  containerRegistry: 'openhackydy7auy8acr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/apis/user-java/Dockerfile'
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  appName: 'openhackydy7auy8userjava'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build And Unit Test
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      inputs:
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        arguments: "-t temp-image:$(tag) --target build-env"
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          docker create --name temp-container temp-image:$(tag)
          docker cp temp-container:/target/surefire-reports/ $(Build.ArtifactStagingDirectory)/testresults 
          docker rm -fv temp-container
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*.xml'
        searchFolder: '$(Build.ArtifactStagingDirectory)/testresults'
        mergeTestResults: true
        testRunTitle: 'Unit Tests(MockIt)'

- stage: Build_Final
  condition: and(succeeded(), eq(variables.isMaster, true)) 
  displayName: Build Runtime Image
  jobs:  
  - job: Publish_Image
    displayName: Build and Publish Image
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build And Push Image
      inputs:
        command: buildAndPush
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: |
          $(tag)
          latest

- stage: Deploy
  condition: and(succeeded(), eq(variables.isMaster, true)) 
  displayName: Deploy Container
  jobs:
  - job: Deploy
    steps:
    - task: AzureWebAppContainer@1
      inputs:
        azureSubscription: $(azureSubscription)
        resourceGroupName: 'openhackydy7auy8rg'
        deployToSlotOrASE: true
        slotName: 'staging'
        appName: $(appName)
        imageName: $(containerRegistry)/$(imageRepository):$(tag)
