# Docker
# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# What happens here when I give it a different name what was created in GUI?
name: ReallyDifferentName

# specific path build
trigger:
  branches:
    include:
    - master
    - feature/*
  paths:
    include:
    - apis/userprofile/*

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '593474d4-1b31-441a-838b-adcd84a14eb0'
  imageRepository: 'devopsoh/api-userprofile'
  containerRegistry: 'openhackydy7auy8acr.azurecr.io'

  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  dockerfilePath: '$(Build.SourcesDirectory)/apis/userprofile/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build And Unit Test
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      inputs:
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        arguments: "-t temp-image:$(tag) --target build"
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          docker create --name temp-container temp-image:$(tag)
          docker cp temp-container:/app/reports/ $(Build.ArtifactStagingDirectory)/testresults 
          docker rm -fv temp-container
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*.xml'
        searchFolder: '$(Build.ArtifactStagingDirectory)/testresults'
        mergeTestResults: true
        testRunTitle: 'Unit Tests(MockIt)'
- stage: Build_Final
  # Only push new image if it is master branch. E.g after PR approval.
  condition: and(succeeded(), eq(variables.isMaster, true)) 
  displayName: Build Runtime Image
  jobs:  
  - job: Publish_Image
    displayName: Build and Publish Image
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build Deployable Image
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)



